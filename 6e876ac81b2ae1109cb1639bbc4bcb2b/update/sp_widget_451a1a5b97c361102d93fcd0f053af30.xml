<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[// Server-side code in ServiceNow widget server script

(function() {
  var request = new sn_ws.RESTMessageV2();
  var clientID = 'AX_ynW9-5JjV6MttaFgC8j4HSU40joSjuG-Gu8XmvTFP5HVJNZBgq7QPA3nnxejEYsqA3V_a2L9VP5iv';
  var appSecret = 'EKMcs15MNfGw8OIkCragRFFbw9di_ZISYzVfmxw2eVFYioTF4cBIdzR1EWij5Zf42WoRPKigPeidLaqN';
  var baseURL = 'https://api.postman.com/collections/10724652-206d763e-40ca-49c9-b60f-e7a48a26de20?access_key=PMAT-01H1TZA584ZZ33Y4AGM7RSSB00'; // or 'https://api-m.paypal.com' for production

  // Create a new order
  var createOrder = function() {
    var accessToken = generateAccessToken();
    var url = baseURL + '/v2/checkout/orders';
    var payload = {
      intent: 'CAPTURE',
      purchase_units: [
        {
          amount: {
            currency_code: 'USD',
            value: '100.00'
          }
        }
      ]
    };
    var headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + accessToken
    };
    request.setEndpoint(url);
    request.setHttpMethod('POST');
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestHeader('Authorization', 'Bearer ' + accessToken);
    request.setRequestBody(JSON.stringify(payload));
    var response = request.execute();
    var responseBody = response.getBody();
    var data = JSON.parse(responseBody);
    return data;
  };

  // Capture payment for an order
  var capturePayment = function(orderId) {
    var accessToken = generateAccessToken();
    var url = baseURL + '/v2/checkout/orders/' + orderId + '/capture';
    var headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + accessToken
    };
    request.setEndpoint(url);
    request.setHttpMethod('POST');
    request.setRequestHeader('Content-Type', 'application/json');
    request.setRequestHeader('Authorization', 'Bearer ' + accessToken);
    var response = request.execute();
    var responseBody = response.getBody();
    var data = JSON.parse(responseBody);
    return data;
  };

  // Generate an access token using client ID and app secret
  var generateAccessToken = function() {
    var auth = new GlideEncrypter().base64Encode(clientID + ':' + appSecret);
    var url = baseURL + '/v1/oauth2/token';
    var headers = {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Authorization': 'Basic ' + auth
    };
    request.setEndpoint(url);
    request.setHttpMethod('POST');
    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    request.setRequestHeader('Authorization', 'Basic ' + auth);
    request.setRequestBody('grant_type=client_credentials');
    var response = request.execute();
    var responseBody = response.getBody();
    var data = JSON.parse(responseBody);
    return data.access_token;
  };

  // API endpoint for creating a PayPal order
  data.createPaypalOrder = function() {
    var order = createOrder();
    return order;
  };

  // API endpoint for capturing a PayPal order
  data.capturePaypalOrder = function(orderID) {
    var captureData = capturePayment(orderID);
    // TODO: Store payment information such as the transaction ID
    return captureData;
  };
})();
]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>sample</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script/>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>CC-Supradhar</sys_created_by>
        <sys_created_on>2023-06-01 04:48:06</sys_created_on>
        <sys_id>451a1a5b97c361102d93fcd0f053af30</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>sample</sys_name>
        <sys_package display_value="AuctionArc" source="x_1046400_auction">6e876ac81b2ae1109cb1639bbc4bcb2b</sys_package>
        <sys_policy/>
        <sys_scope display_value="AuctionArc">6e876ac81b2ae1109cb1639bbc4bcb2b</sys_scope>
        <sys_update_name>sp_widget_451a1a5b97c361102d93fcd0f053af30</sys_update_name>
        <sys_updated_by>CC-Supradhar</sys_updated_by>
        <sys_updated_on>2023-06-01 08:09:19</sys_updated_on>
        <template><![CDATA[
<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
  <body>
    <!-- Replace "test" with your own sandbox Business account app client ID -->
    <script src="https://www.paypal.com/sdk/js?client-id=test&currency=USD"></script>
    <!-- Set up a container element for the button -->
    <div id="paypal-button-container"><button >
      jd
      </button></div>
    <script>
      paypal.Buttons({
        // Order is created on the server and the order id is returned
        createOrder() {
          return fetch("/my-server/create-paypal-order", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            // use the "body" param to optionally pass additional order information
            // like product skus and quantities
            body: JSON.stringify({
              cart: [
                {
                  sku: "YOUR_PRODUCT_STOCK_KEEPING_UNIT",
                  quantity: "YOUR_PRODUCT_QUANTITY",
                },
              ],
            }),
          })
          .then((response) => response.json())
          .then((order) => order.id);
        },
        // Finalize the transaction on the server after payer approval
        onApprove(data) {
          return fetch("/my-server/capture-paypal-order", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              orderID: data.orderID
            })
          })
          .then((response) => response.json())
          .then((orderData) => {
            // Successful capture! For dev/demo purposes:
            console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
            const transaction = orderData.purchase_units[0].payments.captures[0];
            alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);
            // When ready to go live, remove the alert and show a success message within this page. For example:
            // const element = document.getElementById('paypal-button-container');
            // element.innerHTML = '<h3>Thank you for your payment!</h3>';
            // Or go to another URL:  window.location.href = 'thank_you.html';
          });
        }
      }).render('#paypal-button-container');
    </script>
  </body>
</html>
]]></template>
    </sp_widget>
</record_update>
